export namespace toast {
    export { subscribe };
    export { push };
    export { pop };
    export { set };
    export { _init };
}
export type SvelteComponent = import('svelte').ComponentType;
export type FlyParams = import('svelte/types/runtime/transition/index').FlyParams;
export type SvelteToastCustomComponent = {
    /**
     * - custom Svelte Component
     */
    src: SvelteComponent;
    /**
     * - props to pass into custom component
     */
    props?: {
        [x: string]: any;
    };
    /**
     * - forward toast id to prop name
     */
    sendIdTo?: string;
};
export type SvelteToastOnPopCallback = (id?: number) => any;
export type SvelteToastOptions = {
    /**
     * - unique id generated for every toast
     */
    id?: number;
    /**
     * - container target name to send toast to
     */
    target?: string;
    /**
     * - toast message
     */
    msg?: string;
    /**
     * - duration of progress bar tween from initial to next
     */
    duration?: number;
    /**
     * - initial progress bar value
     */
    initial?: number;
    /**
     * - next progress bar value
     */
    next?: number;
    /**
     * - pause progress bar tween on mouse hover
     */
    pausable?: boolean;
    /**
     * - allow dissmiss with close button
     */
    dismissable?: boolean;
    /**
     * - display toasts in reverse order
     */
    reversed?: boolean;
    /**
     * - toast intro fly animation settings
     */
    intro?: FlyParams;
    /**
     * - css var overrides
     */
    theme?: {
        [x: string]: string | number;
    };
    /**
     * - user-defined classes
     */
    classes?: string[];
    /**
     * - callback that runs on toast dismiss
     */
    onpop?: SvelteToastOnPopCallback;
    /**
     * - send custom Svelte Component as a message
     */
    component?: SvelteToastCustomComponent;
    /**
     * - DEPRECATED
     */
    progress?: number;
};
declare const subscribe: (this: void, run: import("svelte/store").Subscriber<any[]>, invalidate?: (value?: any[]) => void) => import("svelte/store").Unsubscriber;
/**
 * Send a new toast
 * @param {(string|SvelteToastOptions)} msg
 * @param {SvelteToastOptions} [opts]
 * @returns {number}
 */
declare function push(msg: (string | SvelteToastOptions), opts?: SvelteToastOptions): number;
/**
 * Remove toast(s)
 * - toast.pop() // removes the last toast
 * - toast.pop(0) // remove all toasts
 * - toast.pop(id) // removes the toast with specified `id`
 * - toast.pop({ target: 'foo' }) // remove all toasts from target `foo`
 * @param {(number|Object.<'target', string>)} [id]
 */
declare function pop(id?: (number | any)): void;
/**
 * Update an existing toast
 * @param {(number|SvelteToastOptions)} id
 * @param {SvelteToastOptions} [opts]
 */
declare function set(id: (number | SvelteToastOptions), opts?: SvelteToastOptions): void;
declare function _init(target?: string, opts?: {}): {
    [x: string]: SvelteToastOptions;
};
export {};
